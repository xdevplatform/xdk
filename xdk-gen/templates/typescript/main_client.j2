/**
 * Main client for the X API.
 *
 * This module provides the main client class for interacting with the X API.
 */

{% for tag in tags %}
import { {{ tag|pascal_case }}Client } from './{{ tag|snake_case }}';
{% endfor %}

/**
 * Configuration options for the X API client
 */
export interface ClientConfig {
    /** Base URL for API requests */
    baseUrl?: string;
    /** Bearer token for authentication */
    bearerToken?: string;
    /** OAuth2 access token */
    accessToken?: string;
    /** Custom headers to include in requests */
    headers?: Record<string, string>;
}

/**
 * Main client class for the X API
 */
export class Client {
    /** Base URL for API requests */
    readonly baseUrl: string;
    /** Bearer token for authentication */
    readonly bearerToken?: string;
    /** OAuth2 access token */
    readonly accessToken?: string;
    /** Headers for requests */
    readonly headers: Headers;
    /** OAuth2 session for requests */
    readonly oauth2Session?: typeof fetch;

    {% for tag in tags %}
    /** {{ tag }} operations */
    readonly {{ tag|camel_case }}: {{ tag|pascal_case }}Client;
    {% endfor %}

    constructor(config: ClientConfig = {}) {
        this.baseUrl = config.baseUrl || 'https://api.twitter.com/2';
        this.bearerToken = config.bearerToken;
        this.accessToken = config.accessToken;
        this.headers = new Headers(config.headers);

        {% for tag in tags %}
        this.{{ tag|camel_case }} = new {{ tag|pascal_case }}Client(this);
        {% endfor %}
    }

    /**
     * Check if the OAuth2 token is expired
     */
    isTokenExpired(): boolean {
        // TODO: Implement token expiration check
        return false;
    }

    /**
     * Refresh the OAuth2 token
     */
    async refreshToken(): Promise<void> {
        // TODO: Implement token refresh
    }
} 