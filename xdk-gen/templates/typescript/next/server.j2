/**
 * Next.js server-side utilities for the X API SDK
 */
import { headers } from 'next/headers';
import { Client, type ClientConfig } from '../client';

// Cache for storing client instances
const clientCache = new Map<string, Client>();

/**
 * Create a client instance for server components
 */
export function createServerClient(config: ClientConfig) {
    const headersList = headers();
    const cacheKey = JSON.stringify(config);

    // Return cached client if it exists
    if (clientCache.has(cacheKey)) {
        return clientCache.get(cacheKey)!;
    }

    // Create new client with headers from the request
    const client = new Client({
        ...config,
        headers: {
            ...Object.fromEntries(headersList.entries()),
            ...config.headers,
        },
    });

    // Cache the client
    clientCache.set(cacheKey, client);
    return client;
}

{% for tag in tags %}
/**
 * Server actions for {{ tag }} operations
 */
export class {{ tag|pascal_case }}Actions {
    private client: Client;

    constructor(config: ClientConfig) {
        this.client = createServerClient(config);
    }

    {% for operation in operations %}
    {% if operation.operation_id %}
    /**
     * Server action for {{ operation.operation_id }}
     * {% if operation.description %}
     * {{ operation.description }}
     * {% endif %}
     */
    async {{ operation.operation_id|camel_case }}(
        {% if operation.parameters %}
        params: {
            {% for param in operation.parameters %}
            {% if param.name %}
            {{ param.name|camel_case }}{% if not param.required %}?{% endif %}: {% if param.schema and param.schema.type %}{{ param.schema.type|typescript_type }}{% else %}any{% endif %};
            {% endif %}
            {% endfor %}
        }
        {% endif %}
    ) {
        'use server';
        return this.client.{{ tag|camel_case }}.{{ operation.operation_id|camel_case }}(
            {% if operation.parameters %}params{% endif %}
        );
    }

    {% endif %}
    {% endfor %}
}
{% endfor %}

/**
 * Create server actions for all API operations
 */
export function createServerActions(config: ClientConfig) {
    return {
        {% for tag in tags %}
        {{ tag|camel_case }}: new {{ tag|pascal_case }}Actions(config),
        {% endfor %}
    };
} 