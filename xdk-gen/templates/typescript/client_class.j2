/**
 * {{ tag }} client for the X API.
 *
 * This module provides a client for interacting with the {{ tag }} endpoints of the X API.
 */

import { Client } from '../client.js';
import {
{% for operation in operations -%}
{% if operation.request_body -%}
    {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Request,
{% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses -%}
    {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response,
{% endif -%}
{% elif operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses -%}
    {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response,
{% endif -%}
{% endfor -%}
} from './models.js';

/**
 * Client for {{ tag }} operations
 */
export class {{ tag|pascal_case }}Client {
    private client: Client;

    constructor(client: Client) {
        this.client = client;
    }

{% for operation in operations %}
    /**
     * {{ operation.summary | default("") }}{% if operation.description %}
     * {{ operation.description }}{% endif %}{% for param in operation.parameters -%}
{% if param.name %}
     * @param {{ param.name | camel_case }} {% if param.description %}{{ param.description }}{% else %}{{ param.name }}{% endif %}{% endif -%}
{% endfor -%}{% if operation.request_body -%}
{% if operation.request_body.content -%}
{% set content_type = "application/json" -%}
{% if operation.request_body.content[content_type] -%}
{% set schema = operation.request_body.content[content_type].schema -%}
     * @param body {% if schema and schema.description %}{{ schema.description }}{% else %}Request body{% endif %}{% else -%}
     * @param body Request body{% endif -%}
{% else -%}
     * @param body Request body{% endif -%}
{% endif -%}
     * @returns {% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}{{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response{% else %}Record<string, any>{% endif %} Response data
     */
    async {{ operation.operation_id | camel_case }}(
{% for param in operation.parameters | selectattr('required') -%}
{% if param.name -%}
        {{ param.name | camel_case }}: {% if param.schema and param.schema.type %}{{ param.schema.type | typescript_type }}{% else %}any{% endif %},
{% endif -%}
{% endfor -%}
{% if operation.request_body and operation.request_body.required -%}
        body: {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Request,
{% endif -%}
{% for param in operation.parameters | rejectattr('required') -%}
{% if param.name -%}
        {{ param.name | camel_case }}?: {% if param.schema and param.schema.type %}{{ param.schema.type | typescript_type }}{% else %}any{% endif %},
{% endif -%}
{% endfor -%}
{% if operation.request_body and not operation.request_body.required -%}
        body?: {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Request,
{% endif -%}
    ): Promise<{% if operation.responses and "200" in operation.responses %}{{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response{% else %}Record<string, any>{% endif %}> {
        let url = this.client.baseUrl + "{{ operation.path }}";

{% set ns = namespace(has_bearer_token = false, has_oauth2_token = false) -%}
{% if operation.security -%}
{% for security_requirement in operation.security -%}
{% for scheme_name in security_requirement -%}
{% if scheme_name == "BearerToken" -%}
{% set ns.has_bearer_token = true -%}
{% endif -%}
{% if scheme_name == "OAuth2UserToken" -%}
{% set ns.has_oauth2_token = true -%}
        // Ensure we have a valid access token
        if (this.client.oauth2Auth && this.client.token) {
            // Check if token needs refresh
            if (this.client.isTokenExpired()) {
                await this.client.refreshToken();
            }
        }
{% endif -%}
{% endfor -%}
{% endfor -%}
{% endif -%}

        const params = new URLSearchParams();
{% for param in operation.parameters %}
{% if param.name %}
{% if param.in == "query" %}
        if ({{ param.name | camel_case }} !== undefined) {
{% if param.schema and param.schema.type == "array" and not param.explode %}
            params.set("{{ param.name }}", {{ param.name | camel_case }}.map(String).join(","));
{% else %}
            params.set("{{ param.name }}", String({{ param.name | camel_case }}));
{% endif %}
        }
{% endif %}
{% endif %}
{% endfor %}

{% for param in operation.parameters %}
{% if param.name %}
{% if param.in == "path" %}
        url = url.replace("{{ '{' + param.name + '}' }}", String({{ param.name | camel_case }}));
{% endif %}
{% endif %}
{% endfor %}

        // Create headers by copying the client's headers
        const headers = new Headers(this.client.headers);
        
        // Set authentication headers
{% if operation.security %}
{% if ns.has_bearer_token %}
        if (this.client.bearerToken) {
            headers.set("Authorization", `Bearer ${this.client.bearerToken}`);
        } else if (this.client.accessToken) {
            headers.set("Authorization", `Bearer ${this.client.accessToken}`);
        }
{% endif -%}
{% endif -%}

{% for param in operation.parameters %}
{% if param.name %}
{% if param.in == "header" %}
        if ({{ param.name | camel_case }} !== undefined) {
            headers.set("{{ param.name }}", String({{ param.name | camel_case }}));
        }
{% endif %}
{% endif %}
{% endfor %}
{% if operation.request_body and operation.request_body.content %}
{% set content_type = "application/json" %}
        headers.set("Content-Type", "{{ content_type }}");
{% endif %}

        // Make the request
{% if operation.security %}
{% if ns.has_bearer_token %}
        const response = await fetch(url + (params.toString() ? `?${params.toString()}` : ""), {
            method: "{{ operation.method | upper }}",
            headers,
{% if operation.request_body %}
            body: body ? JSON.stringify(body) : undefined,
{% endif %}
        });
{% elif ns.has_oauth2_token %}
        const response = await (this.client.oauth2Session || fetch)(url + (params.toString() ? `?${params.toString()}` : ""), {
            method: "{{ operation.method | upper }}",
            headers,
{% if operation.request_body %}
            body: body ? JSON.stringify(body) : undefined,
{% endif %}
        });
{% else %}
        const response = await fetch(url + (params.toString() ? `?${params.toString()}` : ""), {
            method: "{{ operation.method | upper }}",
            headers,
{% if operation.request_body %}
            body: body ? JSON.stringify(body) : undefined,
{% endif %}
        });
{% endif %}
{% else %}
        const response = await fetch(url + (params.toString() ? `?${params.toString()}` : ""), {
            method: "{{ operation.method | upper }}",
            headers,
{% if operation.request_body %}
            body: body ? JSON.stringify(body) : undefined,
{% endif %}
        });
{% endif %}

        // Check for errors
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        // Parse the response data
        const responseData = await response.json();

{% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}
        return responseData as {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response;
{% else %}
        return responseData;
{% endif %}
    }
{% endfor %}
} 