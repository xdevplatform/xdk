/**
 * {{ tag }} client for the X API.
 *
 * This module provides a client for interacting with the {{ tag }} endpoints of the X API.
 */

import { Client, ApiResponse, RequestOptions } from '../client.js';
import {
{% for operation in operations -%}
{% if operation.request_body -%}
    {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Request,
{% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses -%}
    {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response,
{% endif -%}
{% elif operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses -%}
    {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response,
{% endif -%}
{% endfor -%}
} from './models.js';

/**
 * Client for {{ tag }} operations
 */
export class {{ tag|pascal_case }}Client {
    private client: Client;

    constructor(client: Client) {
        this.client = client;
    }

{% for operation in operations %}
    /**
     * {{ operation.summary | default("") }}{% if operation.description %}
     * {{ operation.description }}{% endif %}{% for param in operation.parameters -%}
{% if param.name %}
     * @param {{ param.name | camel_case }} {% if param.description %}{{ param.description }}{% else %}{{ param.name }}{% endif %}{% endif -%}
{% endfor -%}{% if operation.request_body -%}
{% if operation.request_body.content -%}
{% set content_type = "application/json" -%}
{% if operation.request_body.content[content_type] -%}
{% set schema = operation.request_body.content[content_type].schema -%}
     * @param body {% if schema and schema.description %}{{ schema.description }}{% else %}Request body{% endif %}{% else -%}
     * @param body Request body{% endif -%}
{% else -%}
     * @param body Request body{% endif -%}
{% endif -%}
     * @param options Additional request options
     * @returns Promise with the API response
     */
    async {{ operation.operation_id | camel_case }}(
        {# Required parameters #}
        {% for param in operation.parameters | selectattr('required') %}
        {% if param.name %}
        {{ param.name | camel_case }}: {% if param.schema and param.schema.type %}{{ param.schema.type | typescript_type }}{% else %}any{% endif %},
        {% endif %}
        {% endfor %}
        {# Required body #}
        {% if operation.request_body and operation.request_body.required %}
        body: {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Request,
        {% endif %}
        {# Optional parameters #}
        {% for param in operation.parameters | rejectattr('required') %}
        {% if param.name %}
        {{ param.name | camel_case }}?: {% if param.schema and param.schema.type %}{{ param.schema.type | typescript_type }}{% else %}any{% endif %},
        {% endif %}
        {% endfor %}
        {# Optional body #}
        {% if operation.request_body and not operation.request_body.required %}
        body?: {{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Request,
        {% endif %}
        options?: RequestOptions
    ): Promise<ApiResponse<{% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}{{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response{% else %}any{% endif %}>> {
        const params = new URLSearchParams();
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "query" %}
        if ({{ param.name | camel_case }} !== undefined) {
            params.set('{{ param.name }}', String({{ param.name | camel_case }}));
        }
        {% endif %}
        {% endif %}
        {% endfor %}

        const path = `{{ operation.path }}`{% for param in operation.parameters %}{% if param.in == "path" %}.replace('{{ '{' }}{{ param.name }}{{ '}' }}', String({{ param.name | camel_case }})){% endif %}{% endfor %};

        const requestOptions: RequestOptions = {
            ...options,
            headers: {
                ...(options && options.headers ? options.headers : {}),
                {% if operation.request_body %}
                'Content-Type': 'application/json',
                {% endif %}
            },
        };

        {% if operation.request_body %}
        if (body) {
            requestOptions.body = JSON.stringify(body);
        }
        {% endif %}

        return this.client.request<{% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}{{ tag|pascal_case }}{{ operation.operation_id | pascal_case }}Response{% else %}any{% endif %}>(
            '{{ operation.method | upper }}',
            path + (params.toString() ? `?${params.toString()}` : ''),
            requestOptions
        );
    }

{% endfor %}
} 