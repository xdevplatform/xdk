/**
 * React hooks for the X API SDK
 */
import { createContext, useContext, useCallback, useMemo, useEffect, useState } from 'react';
import type { ReactNode } from 'react';
import { Client, OAuth2Auth, type ClientConfig } from '../client';

// Context for the X API client
const XApiContext = createContext<Client | null>(null);

// Provider props interface
interface XApiProviderProps extends Partial<ClientConfig> {
    children: ReactNode;
}

/**
 * Provider component for the X API client
 */
export function XApiProvider({ children, ...config }: XApiProviderProps) {
    const client = useMemo(() => new Client(config), []);

    return (
        <XApiContext.Provider value={client}>
            {children}
        </XApiContext.Provider>
    );
}

/**
 * Hook to access the X API client
 */
export function useXClient() {
    const client = useContext(XApiContext);
    if (!client) {
        throw new Error('useXClient must be used within an XApiProvider');
    }
    return client;
}

/**
 * Hook for OAuth2 authentication
 */
export function useXAuth(config: Parameters<typeof OAuth2Auth>[0]) {
    const auth = useMemo(() => new OAuth2Auth(config), []);
    const [token, setToken] = useState<Awaited<ReturnType<typeof auth.exchangeCode>> | null>(null);

    const login = useCallback(async (code: string) => {
        const newToken = await auth.exchangeCode(code);
        setToken(newToken);
        return newToken;
    }, [auth]);

    const refresh = useCallback(async () => {
        if (!token?.refreshToken) return null;
        const newToken = await auth.refreshToken();
        setToken(newToken);
        return newToken;
    }, [auth, token]);

    return {
        auth,
        token,
        login,
        refresh,
        getAuthUrl: auth.getAuthorizationUrl.bind(auth)
    };
}

{% for tag in tags %}
/**
 * Hook for {{ tag|pascal_case }} operations
 */
export function use{{ tag|pascal_case }}() {
    const client = useXClient();
    return client.{{ tag|camel_case }};
}

{% for operation in operations %}
{% if operation.operation_id %}
/**
 * Hook for {{ operation.operation_id }} operation
 * {% if operation.description %}
 * {{ operation.description }}
 * {% endif %}
 */
export function use{{ operation.operation_id|pascal_case }}(
    {% if operation.parameters %}
    params: {
        {% for param in operation.parameters %}
        {% if param.name %}
        {{ param.name|camel_case }}{% if not param.required %}?{% endif %}: {% if param.schema and param.schema.type %}{{ param.schema.type|typescript_type }}{% else %}any{% endif %};
        {% endif %}
        {% endfor %}
    },
    {% endif %}
    options: {
        enabled?: boolean;
        refetchInterval?: number;
        onSuccess?: (data: any) => void;
        onError?: (error: Error) => void;
    } = {}
) {
    const client = useXClient();
    const [data, setData] = useState<any>(null);
    const [error, setError] = useState<Error | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    const fetch = useCallback(async () => {
        try {
            setIsLoading(true);
            const result = await client.{{ tag|camel_case }}.{{ operation.operation_id|camel_case }}(
                {% if operation.parameters %}params{% endif %}
            );
            setData(result);
            options.onSuccess?.(result);
            return result;
        } catch (e) {
            const err = e instanceof Error ? e : new Error(String(e));
            setError(err);
            options.onError?.(err);
            throw err;
        } finally {
            setIsLoading(false);
        }
    }, [{% if operation.parameters %}params, {% endif %}options.onSuccess, options.onError]);

    useEffect(() => {
        if (options.enabled !== false) {
            fetch();
        }

        if (options.refetchInterval) {
            const interval = setInterval(fetch, options.refetchInterval);
            return () => clearInterval(interval);
        }
    }, [fetch, options.enabled, options.refetchInterval]);

    return {
        data,
        error,
        isLoading,
        refetch: fetch
    };
}

{% endif %}
{% endfor %}
{% endfor %} 