# X API SDK

A modern TypeScript/JavaScript SDK for interacting with the X API. Built with full TypeScript support and comprehensive API coverage.

## Installation

```bash
# Using npm
npm install x-api-sdk

# Using yarn
yarn add x-api-sdk

# Using pnpm (recommended)
pnpm add x-api-sdk
```

## Quick Start

```typescript
import { Client } from 'x-api-sdk';

// Create a client instance - no polyfills needed!
const client = new Client({
    bearerToken: 'your-bearer-token'
});

// Example: Get user details by ID
const user = await client.users.getById('12345');

// Example: Get user details by username
const userByUsername = await client.users.getByUsername('username');

// Example: Get multiple users by IDs
const users = await client.users.getByIds(['12345', '67890']);

// Example: Search for users
const searchResults = await client.users.search('query', 10);

console.log(user.data);
```

## Authentication

The SDK supports multiple authentication methods:

### Bearer Token (App-only)
```typescript
import { Client } from 'x-api-sdk';

const client = new Client({
    bearerToken: 'your-bearer-token'
});

const user = await client.users.getById('12345');

console.log(user.data);
```

### OAuth2.0 (User-context)
```typescript
import { Client, OAuth2 } from 'x-api-sdk';

const oauth2 = new OAuth2({
   clientId: 'your-client-id',
   clientSecret: 'your-client-secret',
   redirectUri: 'your-redirect-uri',
   scope: ['tweet.read', 'users.read']
});

const authUrl = oauth2.getAuthorizationUrl();

const tokens = await oauth2.exchangeCode('authorization-code');

const client = new Client({
   accessToken: tokens.access_token
});
```

### 3-legged OAuth (OAuth1.0)
```typescript
import { Client, OAuth1 } from 'x-api-sdk';

const oauth1 = new OAuth1({
   apiKey: 'your-consumer-key',
   apiSecret: 'your-consumer-secret',
   callback: 'your-callback-url',
});

const authUrl = oauth1.getAuthorizationUrl();

// Or To use Log in with X / Sign in with X, you can set the loginWithX parameter when getting the authorization URL:
const authUrl = oauth1.getAuthorizationUrl(loginWithX=true);

// This can be used to have a user authenticate your app. Once they've done so, they'll be redirected to the Callback / Redirect URI / URL you provided, with oauth_token and oauth_verifier parameters.
// You can then use the verifier to get the access token and secret:
const { accessToken, accessTokenSecret } = await oauth1.getAccessToken("Verifier (oauth_verifier) here");

// If you need to reinitialize OAuth1, you can set the request token and secret afterward, before using the verifier to get the access token and secret:
const oauthToken = oauth1.requestToken.oauthToken;
const oauthTokenSecret = oauth1.requestToken.oauthTokenSecret;

let newOauth1 = new OAuth1({
   apiKey: 'your-consumer-key',
   apiSecret: 'your-consumer-secret',
   callback: 'your-callback-url',
});

newOauth1.requestToken = {
    "oauthToken": oauthToken,
    "oauthTokenSecret": oauthTokenSecret
};

const { accessToken, accessTokenSecret } = await newOauth1.getAccessToken("Verifier (oauth_verifier) here");

// Otherwise, you can simply use the old instance of OAuth1.
// You can then use this instance of OAuth1 to initialize the client
const client = new Client(oauth1);

// You can also use the access_token and access_token_secret to initialize a new instance of OAuth1
const oauth1 = new OAuth1({
   apiKey: 'your-api-key',
   apiSecret: 'your-api-secret',
   accessToken: 'your-access-token',
   accessTokenSecret: 'your-access-token-secret',
});

const client = new Client(oauth1);
```

### PIN-based OAuth (OAuth1.0)
The PIN-based OAuth flow can be used by setting the callback parameter to "oob":

```typescript
let oauth1 = new OAuth1({
   apiKey: 'your-api-key',
   apiSecret: 'your-api-secret',
   callback: 'oob',
});

// You can then get the authorization URL the same way:
const authUrl = oauth1.getAuthorizationUrl();

// When the user authenticates with this URL, they'll be provided a PIN. You can retrieve this PIN from the user to use as the verifier:
const verifier = (get user verifier from user input);

const { accessToken, accessTokenSecret } = await oauth1.getAccessToken(verifier);

// You can then use the instance of OAuth1 and/or the accessToken and accessTokenSecret.
```

## API Examples

### Users API
```typescript
// Get user by ID
const user = await client.users.getById('12345', ['id', 'name', 'username']);

// Get user by username
const userByUsername = await client.users.getByUsername('username');

// Get multiple users
const users = await client.users.getByIds(['12345', '67890']);

// Search users
const searchResults = await client.users.search('query', 10);

// Get user's followers
const followers = await client.users.getFollowers('12345', 100);

// Get user's following
const following = await client.users.getFollowing('12345', 100);
```

### Tweets API
```typescript
// Get tweet by ID
const tweet = await client.tweets.getById('12345', ['id', 'text', 'author_id']);

// Search recent tweets
const searchResults = await client.tweets.tweetsRecentSearch('query', 10);

// Post a tweet
const newTweet = await client.tweets.postTweets({
  text: 'Hello, world!'
});

// Get user's tweets
const userTweets = await client.tweets.usersIdTweets('12345', 100);
```

### Lists API
```typescript
// Get list by ID
const list = await client.lists.getById('12345', ['id', 'name', 'description']);

// Get list members
const members = await client.lists.getMembers('12345', 100);

// Create a new list
const newList = await client.lists.postLists({
  name: 'My List',
  description: 'A list of interesting accounts'
});
```

### Media API
```typescript
// Upload media
const media = await client.media.mediaUpload({
  media_category: 'tweet_image',
  media_data: 'base64_encoded_image_data'
});

// Get media by ID
const mediaInfo = await client.media.getById('12345');
```

## Advanced Features

### Pagination
Many API endpoints support pagination:

```typescript
// Get all followers (handles pagination automatically)
const allFollowers = [];
for await (const follower of client.users.getFollowersAll('12345')) {
  allFollowers.push(follower);
  console.log('Follower:', follower.name);
}
```

### Error Handling
The SDK provides comprehensive error handling:

```typescript
try {
  const user = await client.users.getById('invalid-id');
} catch (error) {
  if (error instanceof ApiError) {
    console.log('API Error:', error.status, error.message);
    console.log('Response:', error.response);
  } else {
    console.log('Network Error:', error.message);
  }
}
```

### Custom Headers
You can add custom headers to your requests:

```typescript
const client = new Client({
  bearerToken: 'your-token',
  headers: {
    'X-Custom-Header': 'custom-value'
  }
});
```

## Configuration

The client supports various configuration options:

```typescript
const client = new Client({
  baseUrl: 'https://api.x.com',
  bearerToken: 'your-bearer-token',
  timeout: 30000,
  retry: true,
  maxRetries: 3,
  userAgent: 'my-app/1.0.0'
});
```

## Type Safety

The SDK is written in TypeScript and provides full type safety:

```typescript
// All methods have complete type definitions
const user = await client.users.getById('12345', ['id', 'name', 'username']);

// TypeScript knows the exact structure of the response
console.log(user.data?.name); // ‚úÖ Fully typed
console.log(user.data?.id);   // ‚úÖ Fully typed

// Autocomplete and type checking work out of the box
const searchResults = await client.users.search(
  'query',     // ‚úÖ Type checked
  10,          // ‚úÖ Type checked
  undefined,   // ‚úÖ Optional parameters
  ['id', 'name'] // ‚úÖ Type checked array
);
```

## Features

- üåê **Zero-config polyfills** - works in Node.js and browsers automatically
- üîí **Multiple authentication methods** - Bearer token, OAuth2.0, and OAuth1.0a
- üìÑ **Comprehensive API coverage** - all X API endpoints
- üö® **Robust error handling** with detailed error messages
- üì¶ **Tree-shakeable** - only import what you use
- ‚ö° **Minimal dependencies** - lightweight and fast
- üîß **Auto-generated** - always up to date with the latest API changes

## License

This project is licensed under the MIT License - see the LICENSE file for details. 