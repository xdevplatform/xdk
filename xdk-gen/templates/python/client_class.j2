"""
{{ tag }} client for the X API.

This module provides a client for interacting with the {{ tag }} endpoints of the X API.
"""

from __future__ import annotations
from typing import Dict, List, Optional, Any, Union, cast, TYPE_CHECKING
import requests
import time

if TYPE_CHECKING:
    from ..client import Client
from .models import (
    {% for operation in operations %}
    {% if operation.request_body %}
    {{ operation.operation_id | pascal_case }}Request,
    {% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}
    {{ operation.operation_id | pascal_case }}Response,
    {% endif %}
    {% elif operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}
    {{ operation.operation_id | pascal_case }}Response,
    {% endif %}
    {% endfor %}
)

class {{ tag|pascal_case }}Client:
    """Client for {{ tag }} operations"""
    
    def __init__(self, client: Client):
        self.client = client
    
    {% for operation in operations %}
    def {{ operation.operation_id | snake_case }}(self, 
        {# Required parameters #}
        {% for param in operation.parameters | selectattr('required') %}
        {% if param.name %}
        {{ param.name | snake_case }}: {% if param.schema and param.schema.type %}{{ param.schema.type | python_type }}{% else %}Any{% endif %},
        {% endif %}
        {% endfor %}
        {# Required body #}
        {% if operation.request_body and operation.request_body.required %}
        body: {{ operation.operation_id | pascal_case }}Request,
        {% endif %}
        {# Optional parameters #}
        {% for param in operation.parameters | rejectattr('required') %}
        {% if param.name %}
        {{ param.name | snake_case }}: {% if param.schema and param.schema.type %}{{ param.schema.type | python_type }}{% else %}Any{% endif %} = None,
        {% endif %}
        {% endfor %}
        {# Optional body #}
        {% if operation.request_body and not operation.request_body.required %}
        body: Optional[{{ operation.operation_id | pascal_case }}Request] = None,
        {% endif %}
    ) -> {% if operation.responses and "200" in operation.responses %}{{ operation.operation_id | pascal_case }}Response{% else %}Dict[str, Any]{% endif %}:
        """
        {{ operation.summary | default("") }}
        
        {% if operation.description %}
        {{ operation.description }}
        {% endif %}
        
        {% for param in operation.parameters %}
        {% if param.name %}
        Args:
            {{ param.name | snake_case }}: {% if param.description %}{{ param.description }}{% else %}{{ param.name }}{% endif %}
        {% endif %}
        {% endfor %}
        {% if operation.request_body %}
        {% if operation.request_body.content %}
        {% set content_type = "application/json" %}
        {% if operation.request_body.content[content_type] %}
        {% set schema = operation.request_body.content[content_type].schema %}
            body: {% if schema and schema.description %}{{ schema.description }}{% else %}Request body{% endif %}
        {% else %}
            body: Request body
        {% endif %}
        {% else %}
            body: Request body
        {% endif %}
        {% endif %}
        
        Returns:
            {% if operation.responses and "200" in operation.responses or "201" in operation.responses %}{{ operation.operation_id | pascal_case }}Response{% else %}Dict[str, Any]{% endif %}: Response data
        """
        url = self.client.base_url + "{{ operation.path }}"

        {% set ns = namespace(has_bearer_token = false, has_oauth2_token = false) %}

        {% if operation.security %}
        {% for security_requirement in operation.security %}
        {% for scheme_name in security_requirement %}
        {% if scheme_name == "BearerToken" %}
        {% set ns.has_bearer_token = true %}
        if self.client.bearer_token:
            self.client.session.headers["Authorization"] = f"Bearer {self.client.bearer_token}"
        elif self.client.access_token:
            self.client.session.headers["Authorization"] = f"Bearer {self.client.access_token}"
        {% endif %}
        {% if scheme_name == "OAuth2UserToken" %}
        {% set ns.has_oauth2_token = true %}
        # Ensure we have a valid access token
        if self.client.oauth2_auth and self.client.token:
            # Check if token needs refresh
            if self.client.is_token_expired():
                self.client.refresh_token()
        {% endif %}
        {% endfor %}
        {% endfor %}
        {% endif %}
        
        params = {}
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "query" %}
        if {{ param.name | snake_case }} is not None:
            {% if param.schema and param.schema.type == "array" and not param.explode %}
            params["{{ param.name }}"] = ",".join(str(item) for item in {{ param.name | snake_case }})
            {% else %}
            params["{{ param.name }}"] = {{ param.name | snake_case }}
            {% endif %}
        {% endif %}
        {% endif %}
        {% endfor %}
        
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "path" %}
        url = url.replace("{{ '{' + param.name + '}' }}", str({{ param.name | snake_case }}))
        {% endif %}
        {% endif %}
        {% endfor %}
        
        headers = {}
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "header" %}
        if {{ param.name | snake_case }} is not None:
            headers["{{ param.name }}"] = {{ param.name | snake_case }}
        {% endif %}
        {% endif %}
        {% endfor %}
        {% if operation.request_body and operation.request_body.content %}
        {% set content_type = "application/json" %}
        headers["Content-Type"] = "{{ content_type }}"
        {% endif %}
        
        # Make the request
        {% if operation.security %}
        {% if ns.has_bearer_token %}
        response = self.client.session.{{ operation.method }}(
            url,
            params=params,
            headers=headers,
            {% if operation.request_body %}
            json=body.model_dump(exclude_none=True) if body else None,
            {% endif %}
        )
        {% elif ns.has_oauth2_token %}
        if self.client.oauth2_session:
            response = self.client.oauth2_session.{{ operation.method }}(
                url,
                params=params,
                headers=headers,
                {% if operation.request_body %}
                json=body.model_dump(exclude_none=True) if body else None,
                {% endif %}
            )
        else:
            response = self.client.session.{{ operation.method }}(
                url,
                params=params,
                headers=headers,
                {% if operation.request_body %}
                json=body.model_dump(exclude_none=True) if body else None,
                {% endif %}
            )
        {% else %}
        response = self.client.session.{{ operation.method }}(
            url,
            params=params,
            headers=headers,
            {% if operation.request_body %}
            json=body.model_dump(exclude_none=True) if body else None,
            {% endif %}
        )
        {% endif %}
        {% else %}
        # This should only happend for the /2/openapi.json route
        response = self.client.session.{{ operation.method }}(
            url,
            params=params,
            headers=headers,
            {% if operation.request_body %}
            json=body.model_dump(exclude_none=True) if body else None,
            {% endif %}
        )
        {% endif %}
        
        # Check for errors
        response.raise_for_status()
        
        # Parse the response data
        response_data = response.json()
        
        # Convert to Pydantic model if applicable
        {% if operation.responses and "200" in operation.responses or operation.responses and "201" in operation.responses %}
        return {{ operation.operation_id | pascal_case }}Response.model_validate(response_data)
        {% else %}
        return response_data
        {% endif %}
    {% endfor %}
