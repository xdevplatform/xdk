"""
{{ tag }} client for the X API.

This module provides a client for interacting with the {{ tag }} endpoints of the X API.
"""

from typing import Dict, List, Optional, Any, Union, cast
import requests
import requests_oauthlib
from ..client import Client
from .models import {% for operation in operations %}{% if operation.request_body %}{{ operation.operation_id | snake_case }}_request{% if operation.responses and "200" in operation.responses %}, {{ operation.operation_id | snake_case }}_response{% endif %}{% elif operation.responses and "200" in operation.responses %}{{ operation.operation_id | snake_case }}_response{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}

class {{ tag }}Client:
    """Client for {{ tag }} operations"""
    
    def __init__(self, client: Client):
        self.client = client
    
    {% for operation in operations %}
    def {{ operation.operation_id | snake_case }}(self, 
        {# Required parameters #}
        {% for param in operation.parameters | selectattr('required') %}
        {% if param.name %}
        {{ param.name | snake_case }}: {% if param.schema and param.schema.type %}{{ param.schema.type | python_type }}{% else %}Any{% endif %},
        {% endif %}
        {% endfor %}
        {# Required body #}
        {% if operation.request_body and operation.request_body.required %}
        body: {{ operation.operation_id | snake_case }}_request,
        {% endif %}
        {# Optional parameters #}
        {% for param in operation.parameters | rejectattr('required') %}
        {% if param.name %}
        {{ param.name | snake_case }}: {% if param.schema and param.schema.type %}{{ param.schema.type | python_type }}{% else %}Any{% endif %} = None,
        {% endif %}
        {% endfor %}
        {# Optional body #}
        {% if operation.request_body and not operation.request_body.required %}
        body: Optional[{{ operation.operation_id | snake_case }}_request] = None,
        {% endif %}
    ) -> {% if operation.responses and "200" in operation.responses %}{{ operation.operation_id | snake_case }}_response{% else %}Dict[str, Any]{% endif %}:
        """
        {{ operation.summary | default("") }}
        
        {% if operation.description %}
        {{ operation.description }}
        {% endif %}
        
        {% for param in operation.parameters %}
        {% if param.name %}
        Args:
            {{ param.name | snake_case }}: {% if param.description %}{{ param.description }}{% else %}{{ param.name }}{% endif %}
        {% endif %}
        {% endfor %}
        {% if operation.request_body %}
        {% if operation.request_body.content %}
        {% set content_type = "application/json" %}
        {% if operation.request_body.content[content_type] %}
        {% set schema = operation.request_body.content[content_type].schema %}
            body: {% if schema and schema.description %}{{ schema.description }}{% else %}Request body{% endif %}
        {% else %}
            body: Request body
        {% endif %}
        {% else %}
            body: Request body
        {% endif %}
        {% endif %}
        
        Returns:
            {% if operation.responses and "200" in operation.responses %}{{ operation.operation_id | snake_case }}_response{% else %}Dict[str, Any]{% endif %}: Response data
        """
        url = self.client.base_url + "{{ operation.path }}"
        
        params = {}
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "query" %}
        if {{ param.name | snake_case }} is not None:
            params["{{ param.name }}"] = {{ param.name | snake_case }}
        {% endif %}
        {% endif %}
        {% endfor %}
        
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "path" %}
        url = url.replace("{{ '{' + param.name + '}' }}", str({{ param.name | snake_case }}))
        {% endif %}
        {% endif %}
        {% endfor %}
        
        headers = {}
        {% for param in operation.parameters %}
        {% if param.name %}
        {% if param.in == "header" %}
        if {{ param.name | snake_case }} is not None:
            headers["{{ param.name }}"] = {{ param.name | snake_case }}
        {% endif %}
        {% endif %}
        {% endfor %}
        {% if operation.request_body and operation.request_body.content %}
        {% set content_type = "application/json" %}
        headers["Content-Type"] = "{{ content_type }}"
        {% endif %}
        
        # Make the request
        response = self.client.session.{{ operation.method }}(
            url,
            params=params,
            headers=headers,
            {% if operation.request_body %}
            json=body.model_dump(exclude_none=True) if body else None,
            {% endif %}
        )
        
        # Check for errors
        response.raise_for_status()
        
        # Parse the response data
        response_data = response.json()
        
        # Convert to Pydantic model if applicable
        {% if operation.responses and "200" in operation.responses %}
        return {{ operation.operation_id | snake_case }}_response.model_validate(response_data)
        {% else %}
        return response_data
        {% endif %}
    {% endfor %}
