"""
{{ tag.display_name }} models for the X API.

This module provides models for the {{ tag.display_name }} endpoints of the X API.
"""

from typing import Dict, List, Optional, Any, Union, Literal
from pydantic import BaseModel, Field, ConfigDict
from datetime import datetime

{# Helper macro to generate nested model classes recursively #}
{% macro generate_nested_class(class_name, schema) -%}
class {{ class_name }}(BaseModel):
    """Nested model for {{ class_name }}"""
    {%- if schema.properties %}
    {%- for key in schema.properties %}
    {%- set prop = schema.properties[key] %}
    {%- if prop.type == 'object' and prop.properties %}
    {{ key }}: Optional["{{ class_name }}{{ key | pascal_case }}"] = None
    {%- else %}
    {{ key }}: {%- if prop.type %}{%- if prop.required %}{{ prop.type | python_type }}{%- else %}Optional[{{ prop.type | python_type }}]{%- endif %}{%- else %}Any{%- endif %} = {%- if not prop.required %}None{%- else %}Field({%- if prop.description %}description="{{ prop.description }}", {%- endif %}{%- if prop.default %}default={{ prop.default }}{%- elif prop.type == 'array' %}default_factory=list{%- elif prop.type == 'object' %}default_factory=dict{%- else %}...{%- endif %}){%- endif %}
    {%- endif %}
    {%- endfor %}
    {%- endif %}

    model_config = ConfigDict(populate_by_name=True)

{# Recursively generate nested classes for object properties #}
{%- if schema.properties %}
{%- for key in schema.properties %}
{%- set prop = schema.properties[key] %}
{%- if prop.type == 'object' and prop.properties %}
{{ generate_nested_class(class_name + key | pascal_case, prop) }}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endmacro %}

{# Helper macro to generate field type with nested class support #}
{% macro field_type(prop, parent_class_name, field_name) -%}
{%- if prop.type == 'object' and prop.properties -%}
Optional["{{ parent_class_name }}{{ field_name | pascal_case }}"]
{%- elif prop.type -%}
{%- if prop.required %}{{ prop.type | python_type }}{%- else %}Optional[{{ prop.type | python_type }}]{%- endif -%}
{%- else -%}
Any
{%- endif -%}
{%- endmacro %}

{% for operation in operations %}
{% if operation.request_body or operation.responses %}
# Models for {{ operation.method_name }}
{% if operation.request_body %}
class {{ operation.class_name }}Request(BaseModel):
    """Request model for {{ operation.method_name }}"""
    {%- if operation.request_body.content %}
    {%- set content_type = "application/json" %}
    {%- if operation.request_body.content[content_type] %}
    {%- set schema = operation.request_body.content[content_type].schema %}
    {%- if schema %}
    {# Handle regular object schemas with properties #}
    {%- if schema.properties %}
    {%- for key in schema.properties %}
    {%- set prop = schema.properties[key] %}
    {{ key }}: {{ field_type(prop, operation.class_name + "Request", key) }} = {%- if not prop.required %}None{%- else %}Field({%- if prop.description %}description="{{ prop.description }}", {%- endif %}{%- if prop.default %}default={{ prop.default }}{%- elif prop.type == 'array' %}default_factory=list{%- elif prop.type == 'object' %}default_factory=dict{%- else %}...{%- endif %}){%- endif %}
    {%- endfor %}
    {# Handle anyOf composition schemas #}
    {%- elif schema.anyOf %}
    {# Generate fields from all anyOf variants #}
    {%- for variant in schema.anyOf %}
    {%- if variant.properties %}
    {%- for key in variant.properties %}
    {%- set prop = variant.properties[key] %}
    {{ key }}: Optional[{%- if prop.type %}{{ prop.type | python_type }}{%- else %}Any{%- endif %}] = Field(default=None{%- if prop.description %}, description="{{ prop.description }}"{%- endif %})
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
    {# Handle allOf composition schemas #}
    {%- elif schema.allOf %}
    {# Generate fields from all allOf variants (merge all) #}
    {%- for variant in schema.allOf %}
    {%- if variant.properties %}
    {%- for key in variant.properties %}
    {%- set prop = variant.properties[key] %}
    {{ key }}: {%- if prop.type %}{{ prop.type | python_type }}{%- else %}Any{%- endif %} = Field({%- if prop.description %}description="{{ prop.description }}", {%- endif %}{%- if prop.default %}default={{ prop.default }}{%- elif prop.type == 'array' %}default_factory=list{%- elif prop.type == 'object' %}default_factory=dict{%- else %}...{%- endif %})
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
    {# Handle oneOf composition schemas #}
    {%- elif schema.oneOf %}
    {# Generate fields from all oneOf variants as optional #}
    {%- for variant in schema.oneOf %}
    {%- if variant.properties %}
    {%- for key in variant.properties %}
    {%- set prop = variant.properties[key] %}
    {{ key }}: Optional[{%- if prop.type %}{{ prop.type | python_type }}{%- else %}Any{%- endif %}] = Field(default=None{%- if prop.description %}, description="{{ prop.description }}"{%- endif %})
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
    {%- endif %}
    {%- endif %}
    {%- endif %}
    {%- endif %}

    model_config = ConfigDict(populate_by_name=True)
{% endif %}

{% if operation.responses and "200" in operation.responses or "201" in operation.responses %}
{% set response = operation.responses["200"] if "200" in operation.responses else operation.responses["201"] %}
{% if response.content %}
{% set content_type = "application/json" %}
{% if response.content[content_type] %}
{% set schema = response.content[content_type].schema %}
class {{ operation.class_name }}Response(BaseModel):
    """Response model for {{ operation.method_name }}"""
    {%- if schema %}
    {# Handle regular object schemas with properties #}
    {%- if schema.properties %}
    {%- for key in schema.properties %}
    {%- set prop = schema.properties[key] %}
    {{ key }}: {{ field_type(prop, operation.class_name + "Response", key) }} = {%- if not prop.required %}None{%- else %}Field({%- if prop.description %}description="{{ prop.description }}", {%- endif %}{%- if prop.default %}default={{ prop.default }}{%- elif prop.type == 'array' %}default_factory=list{%- elif prop.type == 'object' %}default_factory=dict{%- else %}...{%- endif %}){%- endif %}
    {%- endfor %}
    {# Handle anyOf composition schemas #}
    {%- elif schema.anyOf %}
    {# Generate fields from all anyOf variants #}
    {%- for variant in schema.anyOf %}
    {%- if variant.properties %}
    {%- for key in variant.properties %}
    {%- set prop = variant.properties[key] %}
    {{ key }}: Optional[{%- if prop.type %}{{ prop.type | python_type }}{%- else %}Any{%- endif %}] = Field(default=None{%- if prop.description %}, description="{{ prop.description }}"{%- endif %})
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
    {# Handle allOf composition schemas #}
    {%- elif schema.allOf %}
    {# Generate fields from all allOf variants (merge all) #}
    {%- for variant in schema.allOf %}
    {%- if variant.properties %}
    {%- for key in variant.properties %}
    {%- set prop = variant.properties[key] %}
    {{ key }}: {%- if prop.type %}{{ prop.type | python_type }}{%- else %}Any{%- endif %} = Field({%- if prop.description %}description="{{ prop.description }}", {%- endif %}{%- if prop.default %}default={{ prop.default }}{%- elif prop.type == 'array' %}default_factory=list{%- elif prop.type == 'object' %}default_factory=dict{%- else %}...{%- endif %})
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
    {# Handle oneOf composition schemas #}
    {%- elif schema.oneOf %}
    {# Generate fields from all oneOf variants as optional #}
    {%- for variant in schema.oneOf %}
    {%- if variant.properties %}
    {%- for key in variant.properties %}
    {%- set prop = variant.properties[key] %}
    {{ key }}: Optional[{%- if prop.type %}{{ prop.type | python_type }}{%- else %}Any{%- endif %}] = Field(default=None{%- if prop.description %}, description="{{ prop.description }}"{%- endif %})
    {%- endfor %}
    {%- endif %}
    {%- endfor %}
    {%- endif %}
    {%- endif %}

    model_config = ConfigDict(populate_by_name=True)
{% endif %}
{% endif %}
{% endif %}

{# Generate nested classes for request if needed #}
{% if operation.request_body and operation.request_body.content %}
{% set content_type = "application/json" %}
{% if operation.request_body.content[content_type] %}
{% set schema = operation.request_body.content[content_type].schema %}
{% if schema and schema.properties %}
{% for key in schema.properties %}
{% set prop = schema.properties[key] %}
{% if prop.type == 'object' and prop.properties %}
{{ generate_nested_class(operation.class_name + "Request" + key | pascal_case, prop) }}
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endif %}

{# Generate nested classes for response if needed #}
{% if operation.responses and "200" in operation.responses or "201" in operation.responses %}
{% set response = operation.responses["200"] if "200" in operation.responses else operation.responses["201"] %}
{% if response.content %}
{% set content_type = "application/json" %}
{% if response.content[content_type] %}
{% set schema = response.content[content_type].schema %}
{% if schema and schema.properties %}
{% for key in schema.properties %}
{% set prop = schema.properties[key] %}
{% if prop.type == 'object' and prop.properties %}
{{ generate_nested_class(operation.class_name + "Response" + key | pascal_case, prop) }}
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}  