"""
Auto-generated contract tests for {{ tag }} client.

This module contains tests that validate the request/response contracts
of the {{ tag }} client against the OpenAPI specification.

Generated automatically - do not edit manually.
"""

import pytest
import json
from unittest.mock import Mock, patch
from xdk.{{ tag.import_name }}.client import {{ tag.class_name }}Client
from xdk import Client


class Test{{ tag.class_name }}Contracts:
    """Test the API contracts of {{ tag.class_name }}Client."""
    
    def setup_class(self):
        """Set up test fixtures."""
        self.client = Client(base_url="https://api.example.com")
        self.{{ tag.property_name }}_client = getattr(self.client, "{{ tag.property_name }}")
    
    {% for contract_test in test_spec.contract_tests %}
    def test_{{ contract_test.method_name }}_request_structure(self):
        """Test {{ contract_test.method_name }} request structure."""
        
        # Mock the session to capture request details
        with patch.object(self.client, 'session') as mock_session:
            mock_response = Mock()
            mock_response.status_code = {{ contract_test.response_schema.status_code }}
            mock_response.json.return_value = {
                {% for field in contract_test.response_schema.expected_fields %}
                {% if field.is_array %}
                "{{ field.name }}": [],
                {% elif field.field_type == "string" %}
                "{{ field.name }}": "test_value",
                {% elif field.field_type == "integer" %}
                "{{ field.name }}": 42,
                {% elif field.field_type == "boolean" %}
                "{{ field.name }}": True,
                {% else %}
                "{{ field.name }}": None,
                {% endif %}
                {% endfor %}
            }
            mock_response.raise_for_status.return_value = None
            mock_session.{{ contract_test.method|lower }}.return_value = mock_response
            
            # Prepare test parameters
            kwargs = {}
            
            # Add required parameters
            {% for param in contract_test.required_params %}
            {% if param.param_type == "string" %}
            kwargs["{{ param.name }}"] = "test_{{ param.name }}"
            {% elif param.param_type == "integer" %}
            kwargs["{{ param.name }}"] = 42
            {% elif param.param_type == "boolean" %}
            kwargs["{{ param.name }}"] = True
            {% elif param.param_type == "array" %}
            kwargs["{{ param.name }}"] = ["test_item"]
            {% else %}
            kwargs["{{ param.name }}"] = "test_value"
            {% endif %}
            {% endfor %}
            
            # Add request body if required
            {% if contract_test.request_body_schema %}
            # Import and create proper request model instance
            from xdk.{{ tag.property_name }}.models import {{ contract_test.class_name }}Request
            # Create instance with minimal valid data (empty instance should work for most cases)
            kwargs["body"] = {{ contract_test.class_name }}Request()
            {% endif %}
            
            # Call the method
            try:
                method = getattr(self.{{ tag.property_name }}_client, "{{ contract_test.method_name }}")
                result = method(**kwargs)
                
                # Verify the request was made
                mock_session.{{ contract_test.method|lower }}.assert_called_once()
                
                # Verify request structure
                call_args = mock_session.{{ contract_test.method|lower }}.call_args
                
                # Check URL structure
                called_url = call_args[0][0] if call_args[0] else call_args[1].get('url', '')
                expected_path = "{{ contract_test.path }}"
                assert expected_path.replace('{', '').replace('}', '') in called_url or \
                       any(param in called_url for param in ["test_", "42"]), \
                       f"URL should contain path template elements: {called_url}"
                
                # Verify response structure
                assert result is not None, "Method should return a result"
                
            except Exception as e:
                pytest.fail(f"Contract test failed for {{ contract_test.method_name }}: {e}")
    
    def test_{{ contract_test.method_name }}_required_parameters(self):
        """Test that {{ contract_test.method_name }} handles parameters correctly."""
        method = getattr(self.{{ tag.property_name }}_client, "{{ contract_test.method_name }}")
        
        {% if contract_test.required_params or contract_test.request_body_schema %}
        # Test with missing required parameters - mock the request to avoid network calls
        with patch.object(self.client, 'session') as mock_session:
            # Mock a 400 response (typical for missing required parameters)
            mock_response = Mock()
            mock_response.status_code = 400
            mock_response.json.return_value = {"error": "Missing required parameters"}
            mock_response.raise_for_status.side_effect = Exception("Bad Request")
            mock_session.{{ contract_test.method|lower }}.return_value = mock_response
            
            # Call without required parameters should either raise locally or via server response
            with pytest.raises((TypeError, ValueError, Exception)):
                method()
        {% else %}
        # No required parameters, method should be callable without args
        with patch.object(self.client, 'session') as mock_session:
            mock_response = Mock()
            mock_response.status_code = 200
            mock_response.json.return_value = {}
            mock_response.raise_for_status.return_value = None
            mock_session.{{ contract_test.method|lower }}.return_value = mock_response
            
            try:
                method()
            except Exception as e:
                pytest.fail(f"Method with no required params should be callable: {e}")
        {% endif %}
    
    def test_{{ contract_test.method_name }}_response_structure(self):
        """Test {{ contract_test.method_name }} response structure validation."""
        
        with patch.object(self.client, 'session') as mock_session:
            # Create mock response with expected structure
            mock_response_data = {
                {% for field in contract_test.response_schema.expected_fields %}
                {% if field.is_array %}
                "{{ field.name }}": [
                    {% if field.field_type == "string" %}
                    "test_item_1", "test_item_2"
                    {% elif field.field_type == "integer" %}
                    1, 2, 3
                    {% else %}
                    {"id": "1"}, {"id": "2"}
                    {% endif %}
                ],
                {% elif field.field_type == "string" %}
                "{{ field.name }}": "test_{{ field.name }}",
                {% elif field.field_type == "integer" %}
                "{{ field.name }}": 42,
                {% elif field.field_type == "boolean" %}
                "{{ field.name }}": True,
                {% elif field.field_type == "object" %}
                "{{ field.name }}": {"nested": "value"},
                {% else %}
                "{{ field.name }}": None,
                {% endif %}
                {% endfor %}
            }
            
            mock_response = Mock()
            mock_response.status_code = {{ contract_test.response_schema.status_code }}
            mock_response.json.return_value = mock_response_data
            mock_response.raise_for_status.return_value = None
            mock_session.{{ contract_test.method|lower }}.return_value = mock_response
            
            # Prepare minimal valid parameters
            kwargs = {}
            {% for param in contract_test.required_params %}
            {% if param.param_type == "string" %}
            kwargs["{{ param.name }}"] = "test_value"
            {% elif param.param_type == "integer" %}
            kwargs["{{ param.name }}"] = 1
            {% elif param.param_type == "boolean" %}
            kwargs["{{ param.name }}"] = True
            {% elif param.param_type == "array" %}
            kwargs["{{ param.name }}"] = ["test"]
            {% else %}
            kwargs["{{ param.name }}"] = "test"
            {% endif %}
            {% endfor %}
            
            # Add request body if required
            {% if contract_test.request_body_schema %}
            # Import and create proper request model instance
            from xdk.{{ tag.property_name }}.models import {{ contract_test.class_name }}Request
            # Create instance with minimal valid data (empty instance should work for most cases)
            kwargs["body"] = {{ contract_test.class_name }}Request()
            {% endif %}
            
            # Call method and verify response structure
            method = getattr(self.{{ tag.property_name }}_client, "{{ contract_test.method_name }}")
            result = method(**kwargs)
            
            # Verify response object has expected attributes
            {% for field in contract_test.response_schema.expected_fields %}
            {% if field.required %}
            assert hasattr(result, "{{ field.name }}"), f"Response should have '{{ field.name }}' field"
            {% else %}
            # Optional field - just check it doesn't cause errors if accessed
            try:
                getattr(result, "{{ field.name }}", None)
            except Exception as e:
                pytest.fail(f"Accessing optional field '{{ field.name }}' should not cause errors: {e}")
            {% endif %}
            {% endfor %}
    {% endfor %}